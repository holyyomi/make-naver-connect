name: 🎮 Holy Moment Video Editor Workflow

on:
  workflow_dispatch:
    inputs:
      product_name:
        description: '제품명'
        required: true
        type: string
      video_1_url:
        description: '첫 번째 영상 URL'
        required: true
        type: string
      video_2_url:
        description: '두 번째 영상 URL'
        required: true
        type: string
      video_3_url:
        description: '세 번째 영상 URL'
        required: true
        type: string
      video_4_url:
        description: '네 번째 영상 URL'
        required: true
        type: string
      webhook_url:
        description: 'n8n Webhook URL'
        required: true
        type: string
      make_execution_id:
        description: 'Make 실행 ID'
        required: false
        type: string
      subtitle_style:
        description: '자림 스타일'
        required: false
        default: 'premium_modern'
        type: choice
        options:
        - premium_modern
        - elegant_minimal
        - vibrant_impact
        - friendly_casual
      target_audience:
        description: '타겟 연병칼'
        required: false
        default: '20-30대'
        type: string
      emotion_flow:
        description: '영상 감정 흐름'
        required: false
        default: '감동적'
        type: string

env:
  PRODUCT_NAME: ${{ github.event.inputs.product_name }}
  DATE_TIME: ${{ github.run_id }}

jobs:
  video-editing:
    name: 🎮 할리우드깍 영상 편집
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: 🔧 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 📦 Setup FFmpeg
      uses: FedericoCarboni/setup-ffmpeg@v3
      with:
        ffmpeg-version: release
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🎨 Install Additional Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y bc curl jq imagemagick
        sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra
        fc-cache -fv

    - name: 📅 Download Video Files
      run: |
        mkdir -p ./temp_videos && cd ./temp_videos
        curl -L -o "clip1.mp4" "${{ github.event.inputs.video_1_url }}"
        curl -L -o "clip2.mp4" "${{ github.event.inputs.video_2_url }}"
        curl -L -o "clip3.mp4" "${{ github.event.inputs.video_3_url }}"
        curl -L -o "clip4.mp4" "${{ github.event.inputs.video_4_url }}"
        for i in {1..4}; do
          if [ ! -f "clip${i}.mp4" ]; then exit 1; fi
        done

    - name: 🔍 Video Analysis & Validation
      run: |
        cd ./temp_videos
        for i in {1..4}; do
          WIDTH=$(ffprobe -v quiet -select_streams v:0 -show_entries stream=width -of csv=p=0 "clip${i}.mp4" || echo "1920")
        done

    - name: 🎨 Video Normalization & Enhancement
      run: |
        cd ./temp_videos
        for i in {1..4}; do
          ffmpeg -i "clip${i}.mp4" -vf "scale=1920:1080" -crf 12 -y "normalized_${i}.mp4"
        done

    - name: 📝 Dynamic Subtitle Generation
      run: |
        cd ./temp_videos
        for i in {1..4}; do
          ffmpeg -i "normalized_${i}.mp4" -vf "drawtext=text='Subtitle ${i}'" -y "subtitled_${i}.mp4"
        done

    - name: 🎞 Hollywood-Grade Video Merging
      run: |
        cd ./temp_videos
        ffmpeg -i subtitled_1.mp4 -i subtitled_2.mp4 -i subtitled_3.mp4 -i subtitled_4.mp4 -filter_complex "[0:v][1:v][2:v][3:v]concat=n=4:v=1:a=0[outv]" -map "[outv]" -y merged_final.mp4

    - name: 💬 경제적 이해관계 자림 삽입
      run: |
        cd ./temp_videos
        ffmpeg -i merged_final.mp4 \
        -vf "drawtext=text='이 영상은 네이버 새플 컨네트 활동의 일한으로 제작되었으며,':fontfile='/usr/share/fonts/opentype/noto/NotoSansCJK-Bold.ttc':fontsize=42:fontcolor=white:box=1:boxcolor=black@0.6:boxborderw=12:x=(w-text_w)/2:y=(h/2)-50:enable='between(t,1,3.5)',drawtext=text='판매 발생 시 수수료를 제공받을 수 있습니다.':fontfile='/usr/share/fonts/opentype/noto/NotoSansCJK-Bold.ttc':fontsize=42:fontcolor=white:box=1:boxcolor=black@0.6:boxborderw=12:x=(w-text_w)/2:y=(h/2)+10:enable='between(t,1,3.5)'" \
        -c:a copy -y merged_final_notice.mp4
        mv merged_final_notice.mp4 merged_final.mp4

    - name: 📊 Final Processing & Metadata
      run: |
        cd ./temp_videos
        OUTPUT_NAME="HolyMoment_${PRODUCT_NAME}_${DATE_TIME}_MASTERPIECE"
        ffmpeg -i merged_final.mp4 -metadata title="Holy Moment" -c copy -y "${OUTPUT_NAME}.mp4"
        echo "OUTPUT_FILE=${OUTPUT_NAME}.mp4" >> $GITHUB_ENV
        echo "THUMBNAIL_FILE=${OUTPUT_NAME}_thumbnail.jpg" >> $GITHUB_ENV
        echo "REPORT_FILE=${OUTPUT_NAME}_report.txt" >> $GITHUB_ENV

    - name: 📤 Notify n8n Completion
      if: success()
      run: |
        cd ./temp_videos
        curl -X POST "${{ github.event.inputs.webhook_url }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"status\": \"completed\",
            \"product_name\": \"${{ env.PRODUCT_NAME }}\",
            \"output_file\": \"${{ env.OUTPUT_FILE }}\",
            \"thumbnail_file\": \"${{ env.THUMBNAIL_FILE }}\",
            \"artifacts_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
            \"download_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts\",
            \"execution_id\": \"${{ github.event.inputs.make_execution_id }}\",
            \"file_size\": \"$(du -h ${{ env.OUTPUT_FILE }} | cut -f1)\",
            \"duration\": \"$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 ${{ env.OUTPUT_FILE }} | awk '{printf \"%.1f\", $1}')\"
          }"

    - name: 📤 Notify n8n on Failure  
      if: failure()
      run: |
        curl -X POST "${{ github.event.inputs.webhook_url }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"status\": \"failed\",
            \"error\": \"Video editing failed\",
            \"execution_id\": \"${{ github.event.inputs.make_execution_id }}\",
            \"logs_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
          }"

    - name: 📤 Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: holy-moment-masterpiece-${{ env.DATE_TIME }}
        path: |
          ./temp_videos/${{ env.OUTPUT_FILE }}
          ./temp_videos/${{ env.THUMBNAIL_FILE }}
          ./temp_videos/${{ env.REPORT_FILE }}
        retention-days: 30

    - name: 🖼 Create Thumbnail with Emotion Text
      run: |
        cd ./temp_videos
        # 영상에서 썸네일 추출 (1.5초 지점)
        ffmpeg -i merged_final.mp4 -ss 00:00:01.500 -vframes 1 thumbnail_raw.jpg

        # 감성 후킹 문구 설정
        HOOK_TEXT="${{ github.event.inputs.hook_text }}"

        # 텍스트 입힌 감성 썸네일 생성
        convert thumbnail_raw.jpg \
          -gravity south \
          -fill white -undercolor '#00000088' \
          -font "Noto-Sans-CJK-Regular" \
          -pointsize 64 \
          -annotate +0+40 "$HOOK_TEXT" \
          "${OUTPUT_NAME}_thumbnail.jpg"

    - name: 🎊 Success Summary
      run: |
        echo "🎊 성공!"

    - name: 🪟 Cleanup
      if: always()
      run: |
        rm -rf ./temp_videos/
